{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,UAEa,CACTC,KAAMC,SAASC,cAAc,WAI5BF,KAAKG,iBAAiB,UAkC3B,SAAsBC,GAClBA,EAAMC,iBAEN,MAAMC,EAAW,GAEG,IAAIC,SAASH,EAAMI,eAE3BC,SAAQ,CAACC,EAAOC,KACxBL,EAASK,GAAQD,KAGrBE,QAAQC,IAAIP,GAGC,MACPQ,EAAQR,EAASS,MAEvBH,QAAQC,IAAIC,IAiBOE,EApBF,EAoBYD,EAbLD,EAcjB,IAAIG,SAAQ,CAACC,EAASC,KAEzB,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACHH,EAEAF,EAAQ,UAACF,QAAUD,IAGnBI,EAAO,UAACH,QAAUD,MAEvBA,OA1BwBS,MAAK,EA9DxCR,SA8D2CA,EA9D3CD,MA8DqDA,MAE/CjB,EAAA2B,OAAKC,QAAQ,uBAAqBV,QAAiBD,UAEtDY,OAAM,EAlETX,SAkEYA,EAlEZD,MAkEsBA,MAEhBjB,EAAA2B,OAAKG,QAAQ,sBAAoBZ,QAAeD,UAOtD,IAAuBC,EAAUD","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n    form: document.querySelector('.form'),\n}\n\n\nrefs.form.addEventListener('submit', onFormSubmit);\n////delay\n////step - delay+=step on every iteration\n/////amount - (of iterations)\n////position - number of iertation (from 1)\n\n///1-2-3\n//get input from formData\n//iteration amount times\n//make promise\n//increase delay on+step\n//notiflix\n\n\n\n// console.log(createPromise(2, 1500));\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   }); \n\n\n\n\n\n\n\n\n  ////Functions\n\nfunction onFormSubmit(event) {\n    event.preventDefault();\n\n    const formData = {};\n\n    const formDataRaw = new FormData(event.currentTarget);\n\n    formDataRaw.forEach((value, name) => {\n        formData[name] = value;\n    })\n\n    console.log(formData);\n\n    ///імітація циклу\n    const position = 1;\n    const delay = formData.delay;\n\n    console.log(delay);\n\n\n    ////виклик функції з промісами\n    createPromise(position, delay).then(({ position, delay }) => {\n    // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\n    \n}\n\n\nfunction createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n\n        const shouldResolve = Math.random() > 0.3;\n        \n        setTimeout(() => {\n            if (shouldResolve) {\n                // Fulfill\n                resolve({position, delay});\n            } else {\n                // Reject\n                reject({position, delay});\n            }\n        }, delay);\n        \n    });\n\n}\n"],"names":["$iQIUW","parcelRequire","form","document","querySelector","addEventListener","event","preventDefault","formData","FormData","currentTarget","forEach","value","name","console","log","delay1","delay","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.1e74d98b.js.map"}